הסבר על מימוש הפרויקט
================

1. Huffman
-------------
המימוש הזה של Huffman הוא מימוש נאיבי, ומוגבל לקידוד של תווים בודדים,
לפי שכיחותם. התווים נשמרים במילון שסופר שכיחויות, ולאחר מכן, נשמרים
בתוך רשימה מקושרת ממוינת. בשלב בניית העץ, מבצעים את אלגוריתם Huffman
הבסיסי, כאשר מחיקת התווים שנכנסו לעץ, והוספת צומת האב (סכום השכיחויות)
קלות יותר לביצוע, בשל המבנה של הרשימה המקושרת.
לאחר בניית העץ, עוברים שוב על הטקסט, ומקודדים תו אחר תו, לפי הקידוד שלו
בעץ. הדחיסה מתבצעת ע"י הקצאת buffer של בתים, מילוי בית אחר בית בנפרד, 
וכתיבה של כל buffer לקובץ, כאשר אם נשארות שאריות מהקידוד הנוכחי,
הן נכנסות ל buffer הבא.
ספירת השכיחויות לא נדרשת להתבצע בצורה טורית, ולכן בשלב זה, מתבצעת
קריאה טורית של ה bufferים, אבל עיבוד של ה bufferים במקביל, והמתנה
לכל ה threadים, כדי לעבור לשלב בניית העץ.

2. Lz-Huffman
-----------------
מדובר על מימוש שהוא עקרונית זהה למימוש של Huffman עבור התווים,
עם רעיון שהוא עקרונית דומה לצורה הנאיבית של אלגוריתם Lempel Ziv.
בעת המעבר הראשון והשני על התווים, משתמשים במבנה של תור, ע"מ להחזיק
רצף של תווים, כך שניתן לקבוע את אורך המחרוזת המקסימלי שרוצים לקודד.
בנוסף למילון שסופר את שכיחויות התווים, מחזיקים מילון שסופר שכיחויות של
מחרוזות באורכים שונים, עד לאורך המקסימלי, ובנוסף, מחזיקים רשימה מקושרת
ממוינת, באורך קבוע מראש, כך שבכל רגע נתון שומרים בה את המחרוזות בעלות
השכיחויות הגדולות ביותר, אפשר למשקל את השכיחויות לפי פקטור שנגזר מאורכי
המחרוזות. לאחר שלב ספירת השכיחויות, בונים את עץ Huffman, הפעם של מחרוזות,
כאשר התווים נשמרים כמחרוזות בעלות אורך של תו אחד בלבד. בשלב הקידוד,
אוספים שוב מחרוזות, החל מהאורך המקסימלי, ועד לתו הבודד, כאשר אם נמצא קידוד
על מחרוזת כלשהי, מקודדים את כל המחרוזת לפי הקידוד שלה, אחרת, מובטח לנו שיש
לנו קידוד של התו הבודד, בזכות איסוף השכיחויות שבוצע על התווים הבודדים.

 